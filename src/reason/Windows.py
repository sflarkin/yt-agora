#!/usr/bin/env python
# -*- coding: us-ascii -*-
# generated by wxGlade 0.5 on Mon Jul 23 21:00:04 2007 from /Users/matthewturk/Development/reason_wxg/reason_template.wxg

import yt.lagos as lagos
import yt.raven as raven
import yt.enki as enki
import yt.fido as fido
import yt

import os

import yt.raven.backends.MPL as be
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
import wx, wx.py
import matplotlib.backends.backend_wx as be_wx

class ReasonMainWindow(wx.Frame):
    def __init__(self, *args, **kwds):
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        kwds["title"] = "yt - Reason"
        kwds["size"] = (800,800)
        wx.Frame.__init__(self, *args, **kwds)

        self.windows = []
        self.outputs = []
        self.locals = {'lagos':lagos,
                       'raven':raven,
                       'enki':enki,
                       'raven':raven,
                       'outputs':self.outputs,
                       'windows':self.windows}

        self.outputPanel = wx.Panel(self, -1)
        self.intPanel = wx.Panel(self, -1)
        self.interpreter = ReasonInterpreterPanel(self.intPanel, -1, self.locals)
        self.outputList = wx.ListCtrl(self.outputPanel, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.SliceButton = wx.Button(self.outputPanel, -1, "Slice")
        self.ProjectButton = wx.Button(self.outputPanel, -1, "Project")
        self.button_2 = wx.Button(self.outputPanel, -1, "button_2")
        self.button_3 = wx.Button(self.outputPanel, -1, "button_3")

        self.SetupMenubar()

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ReasonMainWindow.__set_properties
        self.outputList.SetMinSize((300,300))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ReasonMainWindow.__do_layout
        grid_sizer_1 = wx.GridSizer(1, 2, 0, 0)
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8.Add(self.interpreter, 1, wx.EXPAND, 0)
        self.intPanel.SetSizer(sizer_8)
        grid_sizer_1.Add(self.intPanel, 1, wx.EXPAND, 0)
        sizer_1.Add(self.outputList, 1, wx.EXPAND, 0)
        sizer_2.Add(self.SliceButton, 0, 0, 0)
        sizer_2.Add(self.ProjectButton, 0, 0, 0)
        sizer_2.Add(self.button_2, 0, 0, 0)
        sizer_2.Add(self.button_3, 0, 0, 0)
        sizer_1.Add(sizer_2, 0, 0, 0)
        self.outputPanel.SetSizer(sizer_1)
        grid_sizer_1.Add(self.outputPanel, 1, wx.EXPAND, 0)
        self.SetSizer(grid_sizer_1)
        grid_sizer_1.Fit(self)
        self.Layout()

    def SetupMenubar(self):
        menuBar = wx.MenuBar()
        fileMenu = wx.Menu()
        menuBar.Append(fileMenu, "File")
        
        # Set up IDs for event binding

        openHierarchy = fileMenu.Append(-1, "Open hierarchy")
        fileMenu.AppendSeparator()
        exit = fileMenu.Append(-1, "Exit")

        self.Bind(wx.EVT_MENU, self.OnOpenHierarchy, openHierarchy)
        self.Bind(wx.EVT_MENU, self.OnExit, exit)

        self.SetMenuBar(menuBar)

    def OnExit(self, event):
        self.Close()

    def OnOpenHierarchy(self, event):
        wildcard = "Hierarchy (*.hierarchy)|*.hierarchy|" \
                   "All files (*,*)|*.*"
        dialog = wx.FileDialog(None, "Choose your hierarchy", os.getcwd(),
                               "", wildcard, wx.OPEN)
        if dialog.ShowModal() == wx.ID_OK:
            file = dialog.GetPath()
            print file
            self.AddStaticOutputFile(file)
            self.RefreshOutputs()
        dialog.Destroy()

    def AddStaticOutputFile(self, filename):
        # Alright, we choose the hierarchy in the file selector,
        # so let's strip that extension off
        fn = filename[:-10]
        eso = lagos.EnzoStaticOutput(fn)
        self.outputs.append(eso)
        # Note that we do NOT refresh here, as we may ultimately want to add
        # several at once.  Refreshing the outputs is left as an exercise to
        # the caller.

    def RefreshOutputs(self, event=None):
        self.outputList.ClearAll()
        self.outputList.InsertColumn(0, "Basename", width=100)
        self.outputList.InsertColumn(1, "Time", width=100)
        self.outputList.InsertColumn(2, "Redshift", width=100)
        self.outputList.InsertColumn(3, "index", width=50)
        for i,o in enumerate(self.outputs):
            self.outputList.InsertStringItem(i, o.basename)
            self.outputList.SetStringItem(i, 1, str(o["InitialTime"]))
            try:
                z = str(o["CosmologyCurrentRedshift"])
            except:
                z = "N/A"
            self.outputList.SetStringItem(i, 2, z)
            self.outputList.SetStringItem(i, 3, str(i))

    def AddProj(self, event=None):
        pass

    def AddSlice(self, event=None):
        for o in self.GetOutputs():
            #field = Toolbars.ChooseField(o)
            #width, unit = Toolbars.ChooseWidth(o)
            field = "Density"
            width = 1.0
            unit = "1"
            print width, unit
            if not field:
                continue
            t = "%s - Slice" % (o.basename)
            print o, 0
            self.parent.windows.append( \
                ReasonSlicePlotWindow(o, parent=self, title=t,
                                      axis=0, size=(800,800),
                                      field = field))
            self.parent.windows[-1].Show()
            self.parent.windows[-1].plot.set_width(width, unit)
            continue
            print o, 1
            self.parent.windows.append( \
                ReasonSlicePlotWindow(o, parent=self, title=t,
                                      axis=1, size=(800,800),
                                      field = field))
            self.parent.windows[-1].Show()
            print o, 2
            self.parent.windows.append( \
                ReasonSlicePlotWindow(o, parent=self, title=t,
                                      axis=2, size=(800,800),
                                      field = field))
            self.parent.windows[-1].Show()
        print "Done"
            

    def GetOutputs(self, event=None):
        # Figure out which outputs are selected
        os = []
        k = self.outputList.GetFirstSelected()
        while k != -1:
            os.append(self.parent.outputs[k])
            k = self.outputList.GetNextSelected(k)
        return os


class ReasonInterpreterPanel(wx.Panel):
    def __init__(self, parent, id, locals):
        wx.Panel.__init__(self, parent, id)
        self.shell = wx.py.shell.Shell(
                           parent=self, id=-1, introText="Welcome to Reason.",
                           locals=locals)
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer.Add(self.shell, 1, wx.EXPAND)
        self.SetSizer(self.sizer)
        self.Fit()

class ReasonVMPlotFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ReasonVMPlotFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_6 = wx.Panel(self, -1)
        self.window_2 = ReasonVMPlotPanel(self.panel_6, -1)
        
        # Tool Bar
        self.toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL|wx.TB_NOICONS|wx.TB_HORZ_LAYOUT)
        self.SetToolBar(self.toolbar)
        self.toolbar.AddSeparator()
        self.toolbar.AddLabelTool(wx.NewId(), "Redraw", wx.NullBitmap, wx.NullBitmap, wx.ITEM_NORMAL, "Force a redraw", "")
        self.toolbar.AddSeparator()
        self.toolbar.AddLabelTool(wx.NewId(), "Change Field", wx.NullBitmap, wx.NullBitmap, wx.ITEM_NORMAL, "Change the displayed field", "")
        self.toolbar.AddSeparator()
        self.toolbar.AddLabelTool(wx.NewId(), "Change Width", wx.NullBitmap, wx.NullBitmap, wx.ITEM_NORMAL, "Change the displayed width", "")
        self.toolbar.AddSeparator()
        # Tool Bar end
        self.frame_3_statusbar = self.CreateStatusBar(1, 0)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ReasonVMPlotFrame.__set_properties
        self.SetTitle("frame_3")
        self.toolbar.SetToolBitmapSize((24, 24))
        self.toolbar.Realize()
        self.frame_3_statusbar.SetStatusWidths([-1])
        # statusbar fields
        frame_3_statusbar_fields = ["frame_3_statusbar"]
        for i in range(len(frame_3_statusbar_fields)):
            self.frame_3_statusbar.SetStatusText(frame_3_statusbar_fields[i], i)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ReasonVMPlotFrame.__do_layout
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9.Add(self.window_2, 1, wx.EXPAND, 0)
        self.panel_6.SetSizer(sizer_9)
        sizer_4.Add(self.panel_6, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_4)
        sizer_4.Fit(self)
        self.Layout()
        # end wxGlade

# end of class ReasonVMPlotFrame


class ReasonFidoSelector(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ReasonFidoSelector.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_4 = wx.Panel(self, -1)
        self.panel_5 = wx.Panel(self.panel_4, -1)
        self.FidoOutputs = wx.TreeCtrl(self.panel_4, -1, style=wx.TR_HAS_BUTTONS|wx.TR_DEFAULT_STYLE|wx.SUNKEN_BORDER)
        self.label_1 = wx.StaticText(self.panel_5, -1, "label_1")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ReasonFidoSelector.__set_properties
        self.SetTitle("frame_4")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ReasonFidoSelector.__do_layout
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6.Add(self.FidoOutputs, 1, wx.EXPAND, 0)
        sizer_7.Add(self.label_1, 0, 0, 0)
        self.panel_5.SetSizer(sizer_7)
        sizer_6.Add(self.panel_5, 1, wx.EXPAND, 0)
        self.panel_4.SetSizer(sizer_6)
        sizer_5.Add(self.panel_4, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_5)
        sizer_5.Fit(self)
        self.Layout()


class ReasonApp(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        frame_1 = ReasonMainWindow(None, -1)
        self.SetTopWindow(frame_1)
        frame_1.Show()
        return True

if __name__ == "__main__":
    app = ReasonApp(0)
    app.MainLoop()
