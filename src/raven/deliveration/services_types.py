################################################## 
# raven_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.TC import ElementDeclaration,TypeDefinition
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# urn:Raven
##############################

class ns0:
    targetNamespace = "urn:Raven"

    class QueryExistingRuns_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "urn:Raven"
        literal = "QueryExistingRuns"
        def __init__(self, **kw):
            ns = ns0.QueryExistingRuns_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"APIKey"), aname="_APIKey", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"user"), aname="_user", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"metaData"), aname="_metaData", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:Raven","QueryExistingRuns")
            kw["aname"] = "_QueryExistingRuns"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._APIKey = None
                    self._user = None
                    self._metaData = None
                    return
            Holder.__name__ = "QueryExistingRuns_Holder"
            self.pyclass = Holder

    class QueryExistingRunsOutput_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "urn:Raven"
        literal = "QueryExistingRunsOutput"
        def __init__(self, **kw):
            ns = ns0.QueryExistingRunsOutput_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Response"), aname="_Response", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"RunID"), aname="_RunID", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:Raven","QueryExistingRunsOutput")
            kw["aname"] = "_QueryExistingRunsOutput"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Response = None
                    self._RunID = None
                    return
            Holder.__name__ = "QueryExistingRunsOutput_Holder"
            self.pyclass = Holder

    class SubmitNewRun_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "urn:Raven"
        literal = "SubmitNewRun"
        def __init__(self, **kw):
            ns = ns0.SubmitNewRun_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"APIKey"), aname="_APIKey", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"user"), aname="_user", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"metaData"), aname="_metaData", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:Raven","SubmitNewRun")
            kw["aname"] = "_SubmitNewRun"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._APIKey = None
                    self._user = None
                    self._metaData = None
                    return
            Holder.__name__ = "SubmitNewRun_Holder"
            self.pyclass = Holder

    class SubmitNewRunOutput_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "urn:Raven"
        literal = "SubmitNewRunOutput"
        def __init__(self, **kw):
            ns = ns0.SubmitNewRunOutput_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Response"), aname="_Response", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"RunID"), aname="_RunID", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:Raven","SubmitNewRunOutput")
            kw["aname"] = "_SubmitNewRunOutput"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Response = None
                    self._RunID = None
                    return
            Holder.__name__ = "SubmitNewRunOutput_Holder"
            self.pyclass = Holder

    class SubmitNewParameterFile_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "urn:Raven"
        literal = "SubmitNewParameterFile"
        def __init__(self, **kw):
            ns = ns0.SubmitNewParameterFile_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"APIKey"), aname="_APIKey", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fileName"), aname="_fileName", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"generatedAt"), aname="_generatedAt", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"RunID"), aname="_RunID", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"metaData"), aname="_metaData", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"pickleObj"), aname="_pickleObj", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:Raven","SubmitNewParameterFile")
            kw["aname"] = "_SubmitNewParameterFile"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._APIKey = None
                    self._fileName = None
                    self._generatedAt = None
                    self._RunID = None
                    self._metaData = None
                    self._pickleObj = None
                    return
            Holder.__name__ = "SubmitNewParameterFile_Holder"
            self.pyclass = Holder

    class SubmitNewParameterFileOutput_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "urn:Raven"
        literal = "SubmitNewParameterFileOutput"
        def __init__(self, **kw):
            ns = ns0.SubmitNewParameterFileOutput_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Response"), aname="_Response", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:Raven","SubmitNewParameterFileOutput")
            kw["aname"] = "_SubmitNewParameterFileOutput"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Response = None
                    return
            Holder.__name__ = "SubmitNewParameterFileOutput_Holder"
            self.pyclass = Holder

    class SubmitNewImage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "urn:Raven"
        literal = "SubmitNewImage"
        def __init__(self, **kw):
            ns = ns0.SubmitNewImage_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"APIKey"), aname="_APIKey", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"IMG_src"), aname="_IMG_src", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname=(ns,"Width"), aname="_Width", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Unit"), aname="_Unit", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ParameterFile"), aname="_ParameterFile", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Field1"), aname="_Field1", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Field2"), aname="_Field2", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Field3"), aname="_Field3", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Axis"), aname="_Axis", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Type"), aname="_Type", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"metaData"), aname="_metaData", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"RunID"), aname="_RunID", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:Raven","SubmitNewImage")
            kw["aname"] = "_SubmitNewImage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._APIKey = None
                    self._IMG_src = None
                    self._Width = None
                    self._Unit = None
                    self._ParameterFile = None
                    self._Field1 = None
                    self._Field2 = None
                    self._Field3 = None
                    self._Axis = None
                    self._Type = None
                    self._metaData = None
                    self._RunID = None
                    return
            Holder.__name__ = "SubmitNewImage_Holder"
            self.pyclass = Holder

    class SubmitNewImageOutput_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        schema = "urn:Raven"
        literal = "SubmitNewImageOutput"
        def __init__(self, **kw):
            ns = ns0.SubmitNewImageOutput_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Response"), aname="_Response", minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("urn:Raven","SubmitNewImageOutput")
            kw["aname"] = "_SubmitNewImageOutput"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Response = None
                    return
            Holder.__name__ = "SubmitNewImageOutput_Holder"
            self.pyclass = Holder

# end class ns0 (tns: urn:Raven)
