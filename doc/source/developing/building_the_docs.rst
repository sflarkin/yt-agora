.. _docs_build:

=================
Building the Docs
=================

The yt documentation makes heavy use of the sphinx documentation automation
suite.  Sphinx, written in python, was originally created for the documentation
of the python project and has many nice capabilities for managing the
documentation of python code.

While much of the yt documentation is static text, we make heavy use of
cross-referencing with API documentation that is automatically generated at
build time by sphinx.  We also use sphinx to run code snippets and embed
resulting images and example data.

yt Sphinx extensions
--------------------

The documentation makes heavy use of custom sphinx extensions to transform
recipes, notebooks, and inline code snippets into python scripts, IPython_
notebooks, or notebook cells that are executed when the docs are built.

To do this, we use IPython's nbconvert module to transform notebooks into
HTML. to simplify versioning of the notebook JSON format, we store notebooks in
an unevaluated state.  To generate evaluated notebooks, which could include
arbitrary output (text, images, HTML), we make use of runipy_, which provides
facilities to script notebook evaluation.

.. _runipy: https://github.com/paulgb/runipy
.. _IPython: http://ipython.org/

Dependencies
------------

To build the docs, you will need yt, IPython, runipy, and all supplementary yt
analysis modules installed. The following dependencies were used to generate the
yt documentation during the release of yt 2.6 in late 2013.

- Sphinx_ 1.1.3
- IPython_ 1.1
- runipy_ (git hash f74458c2877)
- pandoc_ 1.11.1
- Rockstar halo finder 0.99.6
- SZpack_ 1.1.1
- ffmpeg_ 1.2.4 (compiled with libvpx support)
- JSAnimation_ (git hash 1b95cb3a3a)
- Astropy_ 0.2.5

.. _SZpack: http://www.cita.utoronto.ca/~jchluba/Science_Jens/SZpack/SZpack.html
.. _Astropy: http://astropy.org/
.. _Sphinx: http://sphinx-doc.org/
.. _pandoc: http://johnmacfarlane.net/pandoc/
.. _ffmpeg: http://www.ffmpeg.org/
.. _JSAnimation: https://github.com/jakevdp/JSAnimation

You will also need the full yt suite of `yt test data
<http://yt-project.org/data/>`_, including the larger datasets that are not used
in the answer tests.

Building the docs
-----------------

First, you will need to ensure that your testing configuration is properly
configured and that all of the yt test data is in the testing directory.  See
:ref:`run_answer_testing` for more details on how to set up the testing
configuration.

Next, clone the yt-doc repository, navigate to the root of the repository, and
do :code:`make html`.

.. code-block:: bash

   hg clone https://bitbucket.org/yt_analysis/yt-doc ./yt-doc
   cd yt-doc
   make html

If all of the dependencies are installed and all of the test data is in the
testing directory, this should churn away for a while and eventually generate a
docs build.  This process is lengthy but shouldn't last more than an hour.  We
suggest setting :code:`suppressStreamLogging = True` in your yt configuration
(See :ref:`configuration-file`) to suppress large amounts of debug output from
yt.

To clean the docs build, use :code:`make clean`.  By default, :code:`make clean`
will not delete the autogenerated API docs, so use :code:`make fullclean` to
delete those as well.


Quick docs builds
-----------------

Clearly, building the complete docs is something of an undertaking.  If you are
adding new static content building the complete docs build is probably
overkill.  To skip some of the lengthier operations, you can do the following
from the bash prompt:

.. code-block:: bash

   export READTHEDOCS=True

This variable is set for automated builds on the free ReadTheDocs service but
can be used by anyone to force a quick, minimal build.

It's also possible to create a custom sphinx build that builds a restricted set
of notebooks or scripts.  This can be accomplished by editing the Sphinx
:code:`conf.py` file included in the :code:`source` directory at the top level
of the docs.  The extensions included in the build are contained in the
:code:`extensions` list.  To disable an extension, simply remove it from the
list.  Doing so will raise a warning when sphinx encounters the directive in the
docs and will prevent sphinx from evaluating the directive.

As a concrete example, if one wanted to include the :code:`notebook`, and
:code:`notebook-cell` directives, but not the :code:`python-script` or
:code:`autosummary` directives, one would just need to comment out the lines
that append these extensions to the :code:`extensions` list. The resulting docs
build will be significantly quicker since it would avoid executing the lengthy
API autodocumentation as well as a large number of python script snippets in
the narrative docs.
